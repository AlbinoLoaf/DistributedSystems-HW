// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BCClient is the client API for BC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BCClient interface {
	BroadcastMessage(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*Broadcast, error)
}

type bCClient struct {
	cc grpc.ClientConnInterface
}

func NewBCClient(cc grpc.ClientConnInterface) BCClient {
	return &bCClient{cc}
}

func (c *bCClient) BroadcastMessage(ctx context.Context, in *PublishMessage, opts ...grpc.CallOption) (*Broadcast, error) {
	out := new(Broadcast)
	err := c.cc.Invoke(ctx, "/ChittyChat.BC/BroadcastMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BCServer is the server API for BC service.
// All implementations must embed UnimplementedBCServer
// for forward compatibility
type BCServer interface {
	BroadcastMessage(context.Context, *PublishMessage) (*Broadcast, error)
	mustEmbedUnimplementedBCServer()
}

// UnimplementedBCServer must be embedded to have forward compatible implementations.
type UnimplementedBCServer struct {
}

func (UnimplementedBCServer) BroadcastMessage(context.Context, *PublishMessage) (*Broadcast, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastMessage not implemented")
}
func (UnimplementedBCServer) mustEmbedUnimplementedBCServer() {}

// UnsafeBCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BCServer will
// result in compilation errors.
type UnsafeBCServer interface {
	mustEmbedUnimplementedBCServer()
}

func RegisterBCServer(s grpc.ServiceRegistrar, srv BCServer) {
	s.RegisterService(&BC_ServiceDesc, srv)
}

func _BC_BroadcastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BCServer).BroadcastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyChat.BC/BroadcastMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BCServer).BroadcastMessage(ctx, req.(*PublishMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// BC_ServiceDesc is the grpc.ServiceDesc for BC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChittyChat.BC",
	HandlerType: (*BCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastMessage",
			Handler:    _BC_BroadcastMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}

// UsermanagementClient is the client API for Usermanagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsermanagementClient interface {
	LeaveClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Confirmation, error)
	ClientJoin(ctx context.Context, in *NewClient, opts ...grpc.CallOption) (*Client, error)
}

type usermanagementClient struct {
	cc grpc.ClientConnInterface
}

func NewUsermanagementClient(cc grpc.ClientConnInterface) UsermanagementClient {
	return &usermanagementClient{cc}
}

func (c *usermanagementClient) LeaveClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/ChittyChat.Usermanagement/LeaveClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usermanagementClient) ClientJoin(ctx context.Context, in *NewClient, opts ...grpc.CallOption) (*Client, error) {
	out := new(Client)
	err := c.cc.Invoke(ctx, "/ChittyChat.Usermanagement/ClientJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsermanagementServer is the server API for Usermanagement service.
// All implementations must embed UnimplementedUsermanagementServer
// for forward compatibility
type UsermanagementServer interface {
	LeaveClient(context.Context, *Client) (*Confirmation, error)
	ClientJoin(context.Context, *NewClient) (*Client, error)
	mustEmbedUnimplementedUsermanagementServer()
}

// UnimplementedUsermanagementServer must be embedded to have forward compatible implementations.
type UnimplementedUsermanagementServer struct {
}

func (UnimplementedUsermanagementServer) LeaveClient(context.Context, *Client) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveClient not implemented")
}
func (UnimplementedUsermanagementServer) ClientJoin(context.Context, *NewClient) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientJoin not implemented")
}
func (UnimplementedUsermanagementServer) mustEmbedUnimplementedUsermanagementServer() {}

// UnsafeUsermanagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsermanagementServer will
// result in compilation errors.
type UnsafeUsermanagementServer interface {
	mustEmbedUnimplementedUsermanagementServer()
}

func RegisterUsermanagementServer(s grpc.ServiceRegistrar, srv UsermanagementServer) {
	s.RegisterService(&Usermanagement_ServiceDesc, srv)
}

func _Usermanagement_LeaveClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsermanagementServer).LeaveClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyChat.Usermanagement/LeaveClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsermanagementServer).LeaveClient(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Usermanagement_ClientJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsermanagementServer).ClientJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyChat.Usermanagement/ClientJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsermanagementServer).ClientJoin(ctx, req.(*NewClient))
	}
	return interceptor(ctx, in, info, handler)
}

// Usermanagement_ServiceDesc is the grpc.ServiceDesc for Usermanagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Usermanagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChittyChat.Usermanagement",
	HandlerType: (*UsermanagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LeaveClient",
			Handler:    _Usermanagement_LeaveClient_Handler,
		},
		{
			MethodName: "ClientJoin",
			Handler:    _Usermanagement_ClientJoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto.proto",
}
